stages:
  - pre_check
  - build
  - test
  - coverage
  - sanitizer_tests
  - sanitizer_checks
  - deploy
  - private_deploy
  - pre_release
  - release_stage1
  - release_submit

image: $CI_DOCKER_REGISTRY/esp32-toolchain

variables:

  #
  # System environment

  # Common parameters for the 'make' during CI tests
  MAKEFLAGS: "-j4 --no-keep-going"

  GCOV_BUILD_OPTS: ""

  # OpenOCD configuration options
  OPENOCD_CONFIGURE_OPTS: "--disable-doxygen-html --disable-doxygen-pdf --enable-ftdi --enable-jlink --enable-ulink --enable-usb-blaster"

  # GitHub Tool options
  GITHUB_USER: "${GH_USER}"
  GITHUB_REPO: "${GH_REPO}"
  GITHUB_TOKEN: "${GH_TOKEN}"

  #
  # CI settings

  # GIT_STRATEGY is not defined here, an option from "CI / CD Settings"- "General pipelines" is used.
  GIT_SUBMODULE_STRATEGY: none

  #
  # Customization of jobs

  DIST_ART_DIR: "dist"
  DIST_INSTALLED_DIR: "${CI_PROJECT_NAME}"
  ARCHIVE_TOOL: "tar czf"
  ARCHIVE_EXT: "tar.gz"
  RELEASE_DESC: "New release"

  #
  # default variables
  ESP_TOOLCHAIN: "${ESP_TOOLCHAIN_VER}"
  TOOLCHAIN_PREFIX: "xtensa-esp32"
  CHIP_NAME: "esp32"

.add_gh_key_remote: &add_gh_key_remote |
  command -v ssh-agent >/dev/null || exit 1
  eval $(ssh-agent -s)
  printf '%s\n' "${GH_PUSH_KEY}" | tr -d '\r' | ssh-add - > /dev/null
  mkdir -p ~/.ssh && chmod 700 ~/.ssh
  [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config || ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
  git remote remove github || true
  git remote add github ${GH_PUSH_REPO}

# prefix should be like a $CI_PROJECT_NAME, but we cannot use variable here
.release_tag_filter: &release_tag_filter
  only:
    - /^v[0-9].*$/
    - /^openocd-esp32-.*$/

.release_submit_action: &release_submit_action
  image: espressif/github-hub:2
  when: manual
  allow_failure: true
  before_script:
    - set -o errexit; set -o pipefail; set -o nounset
    - test "${DEBUG_SHELL:-''}" = "1" && set -x
    - git remote remove github || true
    - git remote add github ${GH_REPO_HTTPS}
  variables:
    GIT_STRATEGY: fetch
    GH_REL_TAG: ${CI_COMMIT_TAG}

before_script:
  - set -o errexit; set -o pipefail; set -o nounset
  - test "${DEBUG_SHELL:-''}" = "1" && set -x

osx_code_sign:
  stage: pre_release
  <<: *release_tag_filter
  when: on_success
  tags:
    - macos_shell
  dependencies:
   - build_macos
  artifacts:
    paths:
      - ${DIST_ART_DIR}
  script:
    - ARCHIVE_NAME=$(cat ${DIST_ART_DIR}/dist_name_macos)
    - tar -xzf ${DIST_ART_DIR}/$ARCHIVE_NAME -C ${DIST_ART_DIR} && rm ${DIST_ART_DIR}/$ARCHIVE_NAME
    - export TARGET_BINARY="${DIST_ART_DIR}/openocd-esp32/bin/openocd"
    - $PWD/tools/codesign.sh
    - $PWD/tools/notarize.sh
    - cd ${DIST_ART_DIR}
    - ${ARCHIVE_TOOL} ${ARCHIVE_NAME} openocd-esp32/
    - rm -r openocd-esp32/

push_master_to_github:
  stage: deploy
  image: $CI_DOCKER_REGISTRY/esp32-ci-env
  only:
    - master
  when: on_success
  dependencies: []
  variables:
    GIT_STRATEGY: clone
  script:
    - *add_gh_key_remote
    - git push github HEAD:master

release_tag_draft:
  stage: release_stage1
  tags: [ "amd64", "internet" ]
  <<: *release_tag_filter
  <<: *release_submit_action
  script:
    - hub release delete ${GH_REL_TAG} || true
    # release draft
    - hub release create --draft -m "${RELEASE_DESC}" ${GH_REL_TAG}
    # List of archives
    - DIST_DIR=dist
    - FILES=$(find ${DIST_DIR} -name dist_name_\* -exec cat {} \+)
    - cd ${DIST_DIR}
    - ls -l $FILES
    # Upload archives
    - for n in ${FILES}; do hub release edit -m "" -a "${n}" "${GH_REL_TAG}"; done

Release_tag_submit:
  stage: release_submit
  tags: [ "amd64", "internet" ]
  <<: *release_tag_filter
  <<: *release_submit_action
  script:
    - hub release create -m "${RELEASE_DESC}" ${GH_REL_TAG}

Pre-Release_tag_submit:
  stage: release_submit
  tags: [ "amd64", "internet" ]
  <<: *release_tag_filter
  <<: *release_submit_action
  script:
    - hub release create --prerelease -m "${RELEASE_DESC}" ${GH_REL_TAG}

Delete_tag_release:
  stage: release_submit
  tags: [ "amd64", "internet" ]
  <<: *release_tag_filter
  <<: *release_submit_action
  script:
    - hub release delete ${GH_REL_TAG}

.use_ci_tools: &use_ci_tools |
  curl -sSL ${CIT_LOADER_URL} -o cit_loader.sh && sh cit_loader.sh
  source citools/import_functions

upload_to_http:
  stage: private_deploy
  when: manual
  tags: [ "deploy", "shiny" ]
  only:
    - master
  allow_failure: true
  dependencies:
    - build_linux_armhf
  artifacts:
    reports:
      dotenv: build.env
  before_script:
    - *use_ci_tools
  script:
    - cit_add_ssh_key "${HTTP_UPLOAD_KEY}"
    - ARCHIVE_NAME=$(cat ${DIST_ART_DIR}/dist_name_linux-armel)
    - pushd ${DIST_ART_DIR}
    - scp ${ARCHIVE_NAME} ${HTTP_UPLOAD_DIR}/openocd/
    - popd
    - OOCD_DISTRO_URL=${HTTP_PUBLIC_DIR}/openocd/${ARCHIVE_NAME}
    - echo "Archive was published there '${OOCD_DISTRO_URL}'"
    - echo "NEW_OOCD_DISTRO_URL=${OOCD_DISTRO_URL}" >> build.env

test_idf_examples:
  stage: pre_release
  when: manual
  only:
    - master
  allow_failure: true
  variables:
    OOCD_DISTRO_URL: ${NEW_OOCD_DISTRO_URL}
  needs:
    - job: upload_to_http
      artifacts: true
  trigger:
    project: espressif/esp-idf
    strategy: depend

test_premajor_idf_rel_examples:
  stage: pre_release
  when: manual
  only:
    - master
  allow_failure: true
  variables:
    OOCD_DISTRO_URL: ${NEW_OOCD_DISTRO_URL}
  needs:
    - job: upload_to_http
      artifacts: true
  trigger:
    project: espressif/esp-idf
    branch: ${TEST_APP_PREMAJOR_IDF_RELEASE_BRANCH}
    strategy: depend

create_coverage_reports:
  stage: coverage
  image: $CI_DOCKER_REGISTRY/rpi-test-env
  tags:
    - arm
  allow_failure: true
  artifacts:
    paths:
      - dist/lcov_all_report.tar.gz
    reports:
      metrics: cov_infos/metrics.txt
    when: always
    expire_in: 1 week
  script:
    - mkdir -p cov_infos
    - mkdir -p dist
    # Below lines copies all .info files into cov_infos folder
    - >
      folder_list=$(ls -d build_test_app*);
      for each_folder in $folder_list ;
      do
      cp ${each_folder}/*.info cov_infos;
      done
    - ls -la cov_infos/
    # Creating a html report of coverage files.
    - genhtml --ignore-errors source cov_infos/*.info -o lcov_html_report/
    - tar czf dist/lcov_all_report.tar.gz lcov_html_report/
    # Below lines collecting all coverage file names with '-a' flag for lcov merge command.
    - >
      FILES="" ;
      for each_file in cov_infos/*.info ;
      do
      FILES+=" -a ${each_file}" ;
      done
    - lcov ${FILES} -o cov_infos/merged.info
    # Line in below creates a txt file from merged coverage file which includes coverage percentages.
    - lcov --rc lcov_list_width=150 --list cov_infos/merged.info > cov_infos/metrics_input.txt
    - python3 tools/list_to_metrics.py --file cov_infos/metrics_input.txt

include:
  - '.gitlab/ci/util.yml'
  - '.gitlab/ci/build.yml'
  - '.gitlab/ci/build-test-app.yml'
  - '.gitlab/ci/test.yml'
  - '.gitlab/ci/test-sanitizers.yml'
  - '.gitlab/ci/pre-check.yml'